<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="
       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
       http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

    <context:component-scan base-package="com.jzg.framework.jms"/>
    <context:property-placeholder location="classpath:conf/activemq.properties"></context:property-placeholder>



    <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
    <bean id="activeMQConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="${activemq.brokerURL}"/>
        <property name="useAsyncSend" value="true" />
        <!--最大线程数量，默认1000-->
        <property name="maxThreadPoolSize" value="100"/>
    </bean>


    <!--JMS连接池  Spring有个JmsTemplate专门用于支持JMS。JmsTemplate虽然简化了JMS操作，但这个坑爹货每次发送消息时，默认都会建立新的connection，session和producer，并且发送完成后关闭。这样的效率很低
    如果不是使用的JCA容器来管理JMS连接，可以使用AMQ的poolingJMS连接。-->
    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop">
        <property name="connectionFactory" ref="activeMQConnectionFactory" />
    </bean>


    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
    <!--<bean id="singleConnectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
        &lt;!&ndash; 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory &ndash;&gt;
        <property name="targetConnectionFactory" ref="activeMQConnectionFactory"/>
    </bean>-->


    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!-- Spring管理的连接 -->
        <!--<property name="connectionFactory" ref="singleConnectionFactory"/>-->
        <!--ActiveMQ连接池 管理的连接-->
        <property name="connectionFactory" ref="pooledConnectionFactory"/>

        <property name="defaultDestination" ref="queueDestination" />
        <!--<property name="messageConverter" ref="messageConverter" />-->
        <!--开启订阅模式 默认false-->
        <property name="pubSubDomain" value="false" />
        <!--启用服务质量QOS
            deliveryMode 发送模式,
            priority  优先级
            timeToLive 消息在broker中保存的最长时间
            以上属性要生效，必须配置为true，默认false-->
        <property name="explicitQosEnabled" value="true" />
        <!--消息发送模式  DeliveryMode.NON_PERSISTENT=1:非持久 ; DeliveryMode.PERSISTENT=2:持久-->
        <property name="deliveryMode" value="2" />
        <!--消息过期时间  默认0永不过期-->
        <property name="timeToLive" value="0" />
        <!--接收数据的超时时间receiveTimeout  -->
        <property name="receiveTimeout" value="0" />
        <!--消息应答(签收)方式   不带事务的Session签收方式   DefaultListner仅支持自动签收
        Session.AUTO_ACKNOWLEDGE 1 消息自动签收
        Session.CLIENT_ACKNOWLEDGE  2 客户端调用acknowledge方法手动签收
        Session.DUPS_OK_ACKNOWLEDGE 3 不必必须签收，消息可能会重复发送
        Session.INDIVIDUAL_ACKNOWLEDGE 4 单条消息确认 仅ActiveMQ支持-->
        <property name="sessionAcknowledgeMode" value="1" />
    </bean>


    <!--队列目的地，点对点-->
    <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg name="name" value="queue" />
    </bean>








    <!--监听连接池-->
    <bean id="listenerMQConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="${activemq.brokerURL}"/>
        <property name="prefetchPolicy" ref="prefetchPolicy" />
        <!--最大线程数量，默认1000-->
        <property name="maxThreadPoolSize" value="100"/>
    </bean>
    <bean id="listenerPooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop">
        <property name="connectionFactory" ref="listenerMQConnectionFactory" />
    </bean>
    <bean id="prefetchPolicy" class="org.apache.activemq.ActiveMQPrefetchPolicy">
        <!--同tcp://localhost:61616?jms.prefetchPolicy.all=1-->
        <property name="all" value="1"></property>
    </bean>

    <bean id="jmsCallback" class="com.jzg.framework.jms.test.JmsCallbackEntity"></bean>

    <!-- 消息监听器 -->
    <bean id="consumerMessageListener" class="com.jzg.framework.jms.DefaultListener">
        <constructor-arg name="jmsCallback" ref="jmsCallback"/>
    </bean>

    <!-- 消息监听容器 -->
    <bean id="jmsContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <!--<property name="connectionFactory" ref="singleConnectionFactory"/>-->
        <!--ActiveMQ连接池 管理的连接-->
        <property name="connectionFactory" ref="listenerPooledConnectionFactory"/>
        <property name="destination" ref="queueDestination"/>
        <property name="messageListener" ref="consumerMessageListener"/>
        <!--SimpleMessageListenerContainer允许创建多个Session和MessageConsumer来接收消息。
        具体的个数由 concurrentConsumers属性指定。
        需要注意的是，应该只是在Destination为Queue的时候才使用多个 MessageConsumer（Queue中的一个消息只能被一个Consumer接收），
        虽然使用多个MessageConsumer会提高消息处理 的性能，但是消息处理的顺序却得不到保证：
        消息被接收的顺序仍然是消息发送时的顺序，但是由于消息可能会被并发处理，因此消息处理的顺序可能和消息发送的 顺序不同。
        此外，不应该在Destination为Topic的时候使用多个MessageConsumer，这是因为多个 MessageConsumer会接收到同样的消息。-->
        <!--<property name="concurrentConsumers" value="5"/>
        <property name="maxConcurrentConsumers" value="10"/>-->
    </bean>
</beans>